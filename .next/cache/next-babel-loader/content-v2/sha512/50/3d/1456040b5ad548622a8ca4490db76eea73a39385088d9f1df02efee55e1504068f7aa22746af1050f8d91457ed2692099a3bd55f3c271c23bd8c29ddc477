{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// our-domain.com/\nimport MeetupList from '../components/meetups/MeetupList';\nimport { MongoClient } from 'mongodb';\nimport Head from 'next/head';\n\nconst HomePage = props => {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React MeetUp\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browswe a huge List of highly active React MeetUp!\"\n      })]\n    }), /*#__PURE__*/_jsx(MeetupList, {\n      meetups: props.meetups\n    })]\n  });\n}; // Only works Components in the pages\n// Calls before the Component Function HomePage\n// Execute on the Build Process not on the Client Side\n\n\nexport const getStaticProps = async () => {\n  // Fetch data from API\n  const client = await MongoClient.connect('mongodb+srv://Anish_MB:importMongo@cluster0.3udzw.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        description: meetup.description\n      }))\n    },\n    revalidate: 1 //1 sec next.js wait \n    // In every 1 sec Page will be regenerated on Server\n\n  };\n};\nexport default HomePage; // Run always on the Server after Build Process\n// For Every Incoming request the page will regenerate\n// export const getServerSideProps = async(context) =>{\n//     const req = context.req;\n//     const res = context.res;\n//     //Fetch data from API\n//     return{\n//         props:{\n//             meetups: DUMMY_MEETUPS\n//         }\n//     };\n// };","map":null,"metadata":{},"sourceType":"module"}